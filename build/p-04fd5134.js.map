{"version":3,"names":["componentToTransitionListeners","WeakMap","transitionStart","event","propertyName","this","openTransitionProp","target","transitionEl","open","onBeforeOpen","onBeforeClose","transitionEnd","onOpen","onClose","onToggleOpenCloseComponent","component","nonOpenCloseComponent","readTask","allTransitionPropsArray","getComputedStyle","transition","split","openTransitionPropIndex","findIndex","item","transitionDuration","transitionProp","addEventListener","once","connectOpenCloseComponent","disconnectOpenCloseComponent","boundOnTransitionStart","bind","boundOnTransitionEnd","set","has","start","end","get","removeEventListener","delete"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/openCloseComponent.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { readTask } from \"@stencil/core\";\nconst componentToTransitionListeners = new WeakMap();\nfunction transitionStart(event) {\n  if (event.propertyName === this.openTransitionProp && event.target === this.transitionEl) {\n    this.open ? this.onBeforeOpen() : this.onBeforeClose();\n  }\n}\nfunction transitionEnd(event) {\n  if (event.propertyName === this.openTransitionProp && event.target === this.transitionEl) {\n    this.open ? this.onOpen() : this.onClose();\n  }\n}\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @param component\n * @param nonOpenCloseComponent\n */\nexport function onToggleOpenCloseComponent(component, nonOpenCloseComponent = false) {\n  readTask(() => {\n    if (component.transitionEl) {\n      const allTransitionPropsArray = getComputedStyle(component.transitionEl).transition.split(\" \");\n      const openTransitionPropIndex = allTransitionPropsArray.findIndex((item) => item === component.openTransitionProp);\n      const transitionDuration = allTransitionPropsArray[openTransitionPropIndex + 1];\n      if (transitionDuration === \"0s\") {\n        (nonOpenCloseComponent ? component[component.transitionProp] : component.open)\n          ? component.onBeforeOpen()\n          : component.onBeforeClose();\n        (nonOpenCloseComponent ? component[component.transitionProp] : component.open)\n          ? component.onOpen()\n          : component.onClose();\n      }\n      else {\n        component.transitionEl.addEventListener(\"transitionstart\", () => {\n          (nonOpenCloseComponent ? component[component.transitionProp] : component.open)\n            ? component.onBeforeOpen()\n            : component.onBeforeClose();\n        }, { once: true });\n        component.transitionEl.addEventListener(\"transitionend\", () => {\n          (nonOpenCloseComponent ? component[component.transitionProp] : component.open)\n            ? component.onOpen()\n            : component.onClose();\n        }, { once: true });\n      }\n    }\n  });\n}\n/**\n * Helper to keep track of transition listeners on setTransitionEl and connectedCallback on OpenCloseComponent components.\n *\n * For component which do not have open prop, use `onToggleOpenCloseComponent` implementation.\n *\n * @param component\n */\nexport function connectOpenCloseComponent(component) {\n  disconnectOpenCloseComponent(component);\n  if (component.transitionEl) {\n    const boundOnTransitionStart = transitionStart.bind(component);\n    const boundOnTransitionEnd = transitionEnd.bind(component);\n    componentToTransitionListeners.set(component, [\n      component.transitionEl,\n      boundOnTransitionStart,\n      boundOnTransitionEnd\n    ]);\n    component.transitionEl.addEventListener(\"transitionstart\", boundOnTransitionStart);\n    component.transitionEl.addEventListener(\"transitionend\", boundOnTransitionEnd);\n  }\n}\n/**\n * Helper to tear down transition listeners on disconnectedCallback on OpenCloseComponent components.\n *\n * @param component\n */\nexport function disconnectOpenCloseComponent(component) {\n  if (!componentToTransitionListeners.has(component)) {\n    return;\n  }\n  const [transitionEl, start, end] = componentToTransitionListeners.get(component);\n  transitionEl.removeEventListener(\"transitionstart\", start);\n  transitionEl.removeEventListener(\"transitionend\", end);\n  componentToTransitionListeners.delete(component);\n}\n"],"mappings":";;;;;GAMA,MAAMA,EAAiC,IAAIC,QAC3C,SAASC,EAAgBC,GACvB,GAAIA,EAAMC,eAAiBC,KAAKC,oBAAsBH,EAAMI,SAAWF,KAAKG,aAAc,CACxFH,KAAKI,KAAOJ,KAAKK,eAAiBL,KAAKM,eAC3C,CACA,CACA,SAASC,EAAcT,GACrB,GAAIA,EAAMC,eAAiBC,KAAKC,oBAAsBH,EAAMI,SAAWF,KAAKG,aAAc,CACxFH,KAAKI,KAAOJ,KAAKQ,SAAWR,KAAKS,SACrC,CACA,CAQO,SAASC,EAA2BC,EAAWC,EAAwB,OAC5EC,GAAS,KACP,GAAIF,EAAUR,aAAc,CAC1B,MAAMW,EAA0BC,iBAAiBJ,EAAUR,cAAca,WAAWC,MAAM,KAC1F,MAAMC,EAA0BJ,EAAwBK,WAAWC,GAASA,IAAST,EAAUV,qBAC/F,MAAMoB,EAAqBP,EAAwBI,EAA0B,GAC7E,GAAIG,IAAuB,KAAM,EAC9BT,EAAwBD,EAAUA,EAAUW,gBAAkBX,EAAUP,MACrEO,EAAUN,eACVM,EAAUL,iBACbM,EAAwBD,EAAUA,EAAUW,gBAAkBX,EAAUP,MACrEO,EAAUH,SACVG,EAAUF,SACtB,KACW,CACHE,EAAUR,aAAaoB,iBAAiB,mBAAmB,MACxDX,EAAwBD,EAAUA,EAAUW,gBAAkBX,EAAUP,MACrEO,EAAUN,eACVM,EAAUL,eAAe,GAC5B,CAAEkB,KAAM,OACXb,EAAUR,aAAaoB,iBAAiB,iBAAiB,MACtDX,EAAwBD,EAAUA,EAAUW,gBAAkBX,EAAUP,MACrEO,EAAUH,SACVG,EAAUF,SAAS,GACtB,CAAEe,KAAM,MACnB,CACA,IAEA,CAQO,SAASC,EAA0Bd,GACxCe,EAA6Bf,GAC7B,GAAIA,EAAUR,aAAc,CAC1B,MAAMwB,EAAyB9B,EAAgB+B,KAAKjB,GACpD,MAAMkB,EAAuBtB,EAAcqB,KAAKjB,GAChDhB,EAA+BmC,IAAInB,EAAW,CAC5CA,EAAUR,aACVwB,EACAE,IAEFlB,EAAUR,aAAaoB,iBAAiB,kBAAmBI,GAC3DhB,EAAUR,aAAaoB,iBAAiB,gBAAiBM,EAC7D,CACA,CAMO,SAASH,EAA6Bf,GAC3C,IAAKhB,EAA+BoC,IAAIpB,GAAY,CAClD,MACJ,CACE,MAAOR,EAAc6B,EAAOC,GAAOtC,EAA+BuC,IAAIvB,GACtER,EAAagC,oBAAoB,kBAAmBH,GACpD7B,EAAagC,oBAAoB,gBAAiBF,GAClDtC,EAA+ByC,OAAOzB,EACxC,Q"}