{"version":3,"names":["maxTenthForMinuteAndSecond","createLocaleDateTimeFormatter","locale","numberingSystem","includeSeconds","options","hour","minute","timeZone","getSupportedNumberingSystem","second","Intl","DateTimeFormat","getSupportedLocale","error","Error","formatTimePart","number","numberAsString","toString","padStart","formatTimeString","value","isValidTime","hourString","minuteString","secondString","split","parseInt","getLocaleHourCycle","formatter","parts","formatToParts","Date","UTC","getLocalizedTimePart","part","hourIndex","indexOf","find","type","minuteIndex","hourSuffix","trim","secondIndex","minuteSuffix","secondSuffix","getMeridiem","isValidNumber","hourAsNumber","startsWith","endsWith","splitValue","validLength","length","minuteAsNumber","secondAsNumber","hourValid","minuteValid","secondValid","isValidTimePart","valueAsNumber","Number","localizeTimePart","date","localizeTimeString","parseTimeString","dateFromTimeString","format","localizeTimeStringToParts","localizedHour","localizedHourSuffix","localizedMinute","localizedMinuteSuffix","localizedSecond","localizedSecondSuffix","localizedMeridiem","getTimeParts"],"sources":["./node_modules/@esri/calcite-components/dist/collection/utils/time.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.2.0\n */\nimport { getSupportedLocale, getSupportedNumberingSystem } from \"./locale\";\nimport { isValidNumber } from \"./number\";\nexport const maxTenthForMinuteAndSecond = 5;\nfunction createLocaleDateTimeFormatter(locale, numberingSystem, includeSeconds = true) {\n  try {\n    const options = {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      timeZone: \"UTC\",\n      numberingSystem: getSupportedNumberingSystem(numberingSystem)\n    };\n    if (includeSeconds) {\n      options.second = \"2-digit\";\n    }\n    return new Intl.DateTimeFormat(getSupportedLocale(locale), options);\n  }\n  catch (error) {\n    throw new Error(`Invalid locale supplied while attempting to create a DateTime formatter: ${locale}`);\n  }\n}\nexport function formatTimePart(number) {\n  const numberAsString = number.toString();\n  return number >= 0 && number <= 9 ? numberAsString.padStart(2, \"0\") : numberAsString;\n}\nexport function formatTimeString(value) {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const [hourString, minuteString, secondString] = value.split(\":\");\n  const hour = formatTimePart(parseInt(hourString));\n  const minute = formatTimePart(parseInt(minuteString));\n  if (secondString) {\n    const second = formatTimePart(parseInt(secondString));\n    return `${hour}:${minute}:${second}`;\n  }\n  return `${hour}:${minute}`;\n}\nexport function getLocaleHourCycle(locale, numberingSystem) {\n  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n  const parts = formatter.formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));\n  return getLocalizedTimePart(\"meridiem\", parts) ? \"12\" : \"24\";\n}\nfunction getLocalizedTimePart(part, parts) {\n  if (!part || !parts) {\n    return null;\n  }\n  if (part === \"hourSuffix\") {\n    const hourIndex = parts.indexOf(parts.find(({ type }) => type === \"hour\"));\n    const minuteIndex = parts.indexOf(parts.find(({ type }) => type === \"minute\"));\n    const hourSuffix = parts[hourIndex + 1];\n    return hourSuffix && hourSuffix.type === \"literal\" && minuteIndex - hourIndex === 2\n      ? hourSuffix.value?.trim() || null\n      : null;\n  }\n  if (part === \"minuteSuffix\") {\n    const minuteIndex = parts.indexOf(parts.find(({ type }) => type === \"minute\"));\n    const secondIndex = parts.indexOf(parts.find(({ type }) => type === \"second\"));\n    const minuteSuffix = parts[minuteIndex + 1];\n    return minuteSuffix && minuteSuffix.type === \"literal\" && secondIndex - minuteIndex === 2\n      ? minuteSuffix.value?.trim() || null\n      : null;\n  }\n  if (part === \"secondSuffix\") {\n    const secondIndex = parts.indexOf(parts.find(({ type }) => type === \"second\"));\n    const secondSuffix = parts[secondIndex + 1];\n    return secondSuffix && secondSuffix.type === \"literal\" ? secondSuffix.value?.trim() || null : null;\n  }\n  return parts.find(({ type }) => (part == \"meridiem\" ? type === \"dayPeriod\" : type === part))?.value || null;\n}\nexport function getMeridiem(hour) {\n  if (!isValidNumber(hour)) {\n    return null;\n  }\n  const hourAsNumber = parseInt(hour);\n  return hourAsNumber >= 0 && hourAsNumber <= 11 ? \"AM\" : \"PM\";\n}\nexport function isValidTime(value) {\n  if (!value || value.startsWith(\":\") || value.endsWith(\":\")) {\n    return false;\n  }\n  const splitValue = value.split(\":\");\n  const validLength = splitValue.length > 1 && splitValue.length < 4;\n  if (!validLength) {\n    return false;\n  }\n  const [hour, minute, second] = splitValue;\n  const hourAsNumber = parseInt(splitValue[0]);\n  const minuteAsNumber = parseInt(splitValue[1]);\n  const secondAsNumber = parseInt(splitValue[2]);\n  const hourValid = isValidNumber(hour) && hourAsNumber >= 0 && hourAsNumber < 24;\n  const minuteValid = isValidNumber(minute) && minuteAsNumber >= 0 && minuteAsNumber < 60;\n  const secondValid = isValidNumber(second) && secondAsNumber >= 0 && secondAsNumber < 60;\n  if ((hourValid && minuteValid && !second) || (hourValid && minuteValid && secondValid)) {\n    return true;\n  }\n}\nfunction isValidTimePart(value, part) {\n  if (part === \"meridiem\") {\n    return value === \"AM\" || value === \"PM\";\n  }\n  if (!isValidNumber(value)) {\n    return false;\n  }\n  const valueAsNumber = Number(value);\n  return part === \"hour\" ? valueAsNumber >= 0 && valueAsNumber < 24 : valueAsNumber >= 0 && valueAsNumber < 60;\n}\nexport function localizeTimePart({ value, part, locale, numberingSystem }) {\n  if (!isValidTimePart(value, part)) {\n    return;\n  }\n  const valueAsNumber = parseInt(value);\n  const date = new Date(Date.UTC(0, 0, 0, part === \"hour\" ? valueAsNumber : part === \"meridiem\" ? (value === \"AM\" ? 0 : 12) : 0, part === \"minute\" ? valueAsNumber : 0, part === \"second\" ? valueAsNumber : 0));\n  if (!date) {\n    return;\n  }\n  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n  const parts = formatter.formatToParts(date);\n  return getLocalizedTimePart(part, parts);\n}\nexport function localizeTimeString({ value, locale, numberingSystem, includeSeconds = true }) {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const { hour, minute, second = \"0\" } = parseTimeString(value);\n  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));\n  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem, includeSeconds);\n  return formatter?.format(dateFromTimeString) || null;\n}\nexport function localizeTimeStringToParts({ value, locale, numberingSystem }) {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const { hour, minute, second = \"0\" } = parseTimeString(value);\n  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));\n  if (dateFromTimeString) {\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n    const parts = formatter.formatToParts(dateFromTimeString);\n    return {\n      localizedHour: getLocalizedTimePart(\"hour\", parts),\n      localizedHourSuffix: getLocalizedTimePart(\"hourSuffix\", parts),\n      localizedMinute: getLocalizedTimePart(\"minute\", parts),\n      localizedMinuteSuffix: getLocalizedTimePart(\"minuteSuffix\", parts),\n      localizedSecond: getLocalizedTimePart(\"second\", parts),\n      localizedSecondSuffix: getLocalizedTimePart(\"secondSuffix\", parts),\n      localizedMeridiem: getLocalizedTimePart(\"meridiem\", parts)\n    };\n  }\n  return null;\n}\nexport function getTimeParts({ value, locale, numberingSystem }) {\n  if (!isValidTime(value)) {\n    return null;\n  }\n  const { hour, minute, second = \"0\" } = parseTimeString(value);\n  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));\n  if (dateFromTimeString) {\n    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);\n    const parts = formatter.formatToParts(dateFromTimeString);\n    return parts;\n  }\n  return null;\n}\nexport function parseTimeString(value) {\n  if (isValidTime(value)) {\n    const [hour, minute, second] = value.split(\":\");\n    return {\n      hour,\n      minute,\n      second\n    };\n  }\n  return {\n    hour: null,\n    minute: null,\n    second: null\n  };\n}\n"],"mappings":"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"}